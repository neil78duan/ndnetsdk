/* file nd_privkey.cpp 
 * RSA private key 
 * create by auto_tool please DO NOT modify 
 * datetime: 2011-10-13 11:16:4
 */ 

#include "nd_crypt/nd_crypt.h"
#include "ndapplib/applib.h"
/* publish version */
int __g_pirv_publis_num=1 ; 

/* md5 of private key  */
char *__g_pubkey_md5="2c6d210d64a2c4809039036f998cb0f4" ; 


/* RSA private key  data */ 
 R_RSA_PRIVATE_KEY __nd_pri_key = 
{	512,		//bits of key
	// data of priv_key.modulus
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0xe4, 0x34, 0x81, 0xca, 0xc1, 0x16, 0x93
	, 0x7e, 0x39, 0xa3, 0x53, 0xed, 0xaa, 0x64, 0xa4, 0xb6, 0x4
	, 0x8d, 0x21, 0x83, 0xa4, 0x10, 0xcf, 0x5b, 0x6b, 0x71, 0xb0
	, 0x72, 0x3a, 0x2, 0x17, 0xa1, 0x9f, 0x2, 0x94, 0xdb, 0x88
	, 0x42, 0xd0, 0xc7, 0x8a, 0xa1, 0x74, 0x2a, 0xb2, 0xde, 0xef
	, 0xb2, 0x18, 0xb0, 0x69, 0x9c, 0x36, 0xcd, 0xb0, 0xa, 0x3
	, 0xff, 0x39, 0xcf, 0x10, 0xe5, 0x30, 0xad},
	// data of priv_key.publicExponent
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3},
	// data of priv_key.exponent
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x98, 0x23, 0x1, 0x31, 0xd6, 0xf, 0xc
	, 0xfe, 0xd1, 0x17, 0x8d, 0x49, 0x1c, 0x43, 0x18, 0x79, 0x58
	, 0x5e, 0x16, 0x57, 0xc2, 0xb5, 0xdf, 0x92, 0x47, 0xa1, 0x20
	, 0x4c, 0x26, 0xac, 0xf, 0xbf, 0xd2, 0x36, 0x63, 0x4f, 0xf
	, 0x99, 0x65, 0x42, 0x51, 0xc3, 0x9f, 0x4b, 0x23, 0xa8, 0xc1
	, 0x6c, 0xce, 0x49, 0xcf, 0x28, 0x6c, 0x5a, 0x91, 0x70, 0xe2
	, 0xbd, 0x20, 0x31, 0x7a, 0xd4, 0x86, 0x53},
	{	// data of priv_key.prime[0]
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0xfa, 0x24, 0x7a, 0x66, 0x18, 0x7f, 0xca, 0x74, 0xf0
	, 0xd1, 0xf5, 0x12, 0x7, 0x36, 0x25, 0x7d, 0x24, 0xd, 0x4b
	, 0x97, 0x1e, 0xb2, 0x32, 0xb4, 0xdb, 0x6e, 0xe2, 0x9, 0x26
	, 0x61, 0x3b, 0x8b},
	// data of priv_key.prime[1]
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0xe9, 0x8c, 0x85, 0x7e, 0xd8, 0x5c, 0xee, 0x6f, 0x1f
	, 0x2a, 0x10, 0x27, 0xf6, 0x2b, 0xa8, 0x11, 0xbf, 0x34, 0x67
	, 0x48, 0x75, 0x93, 0xa3, 0x2b, 0xd4, 0x74, 0xa7, 0x7b, 0xb2
	, 0x45, 0x2b, 0xa7}
	},
	{	// data of priv_key.primeExponent[0]
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0xa6, 0xc2, 0xfc, 0x44, 0x10, 0x55, 0x31, 0xa3, 0x4b
	, 0x36, 0xa3, 0x61, 0x5a, 0x24, 0x18, 0xfe, 0x18, 0x8, 0xdd
	, 0xf, 0x69, 0xcc, 0x21, 0xcd, 0xe7, 0x9f, 0x41, 0x5b, 0x6e
	, 0xeb, 0x7d, 0x7},
	// data of priv_key.primeExponent[1]
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x9b, 0xb3, 0x3, 0xa9, 0xe5, 0x93, 0x49, 0x9f, 0x6a
	, 0x1c, 0xa, 0xc5, 0x4e, 0xc7, 0xc5, 0x61, 0x2a, 0x22, 0xef
	, 0x85, 0xa3, 0xb7, 0xc2, 0x1d, 0x38, 0x4d, 0xc4, 0xfd, 0x21
	, 0x83, 0x72, 0x6f}
	},
	// data of priv_key.coefficient
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	, 0x0, 0xcd, 0x16, 0x3, 0x46, 0x76, 0x27, 0x75, 0x31, 0x3
	, 0xb8, 0x2d, 0x93, 0xf0, 0x89, 0x5a, 0xef, 0x60, 0x45, 0x18
	, 0x5b, 0x16, 0x84, 0x99, 0x4a, 0x3b, 0x28, 0xb6, 0xbc, 0xe4
	, 0x95, 0x9f, 0x28}
} ;

/* RSA private key  data --end */ 

int SrvGetCertificateVersion(void)
{
	return __g_pirv_publis_num ;
}

char *GetPublickeyMd5(void)
{
	return __g_pubkey_md5 ;
}

char* CalcPrivatekeyMd5(char text[33])
{
	return MD5CryptToStr32((char*)&__nd_pri_key, sizeof(__nd_pri_key), text) ;
}

R_RSA_PRIVATE_KEY *GetPgsrvRsaPrivkey(void) 
{
	return &__nd_pri_key ;
}

