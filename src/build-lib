#make file 

include $(NDHOME)/src/Rules.make

obj1 = $(shell ls $(TOPDIR)/src/nd_common/obj | grep '\.o\>')
OBJS_SRV := $(addprefix $(TOPDIR)/src/nd_common/obj/,$(obj1) )
OBJ_CLIENT := $(addprefix $(TOPDIR)/src/nd_common/obj/,$(obj1) )
OBJ_COMMON := $(addprefix $(TOPDIR)/src/nd_common/obj/,$(obj1) )

obj1 = $(shell ls $(TOPDIR)/src/nd_net/obj | grep '\.o\>')
OBJS_SRV += $(addprefix $(TOPDIR)/src/nd_net/obj/,$(obj1) )
OBJ_CLIENT += $(addprefix $(TOPDIR)/src/nd_net/obj/,$(obj1) )

obj1 = $(shell ls $(TOPDIR)/src/nd_crypt/obj | grep '\.o\>')
OBJS_SRV += $(addprefix $(TOPDIR)/src/nd_crypt/obj/,$(obj1) )
OBJ_CLIENT += $(addprefix $(TOPDIR)/src/nd_crypt/obj/,$(obj1) )
OBJ_COMMON += $(addprefix $(TOPDIR)/src/nd_crypt/obj/,$(obj1) )

obj1 = $(shell ls $(TOPDIR)/src/nd_srvcore/obj | grep '\.o\>')
OBJS_SRV += $(addprefix $(TOPDIR)/src/nd_srvcore/obj/,$(obj1) )

obj1 = $(shell ls $(TOPDIR)/src/nd_vm/obj | grep '\.o\>')
OBJS_SRV += $(addprefix $(TOPDIR)/src/nd_vm/obj/,$(obj1) )
OBJ_COMMON += $(addprefix $(TOPDIR)/src/nd_vm/obj/,$(obj1) )
OBJ_CLIENT +=  $(addprefix $(TOPDIR)/src/nd_vm/obj/,$(obj1) )

obj1 = $(shell ls $(TOPDIR)/src/ndapplib/obj | grep '\.o\>')
OBJS_SRV += $(addprefix $(TOPDIR)/src/ndapplib/obj/,$(obj1) )

obj1 = $(shell ls $(TOPDIR)/src/ndclient/obj | grep '\.o\>')
OBJ_CLIENT += $(addprefix $(TOPDIR)/src/ndclient/obj/,$(obj1) )

OBJ_CLIENT += $(TOPDIR)/src/ndapplib/obj/nd_msgpack.o
OBJ_CLIENT += $(TOPDIR)/src/ndapplib/obj/nd_datatransfer.o

##############set flag


######################


ifeq ($(BUILD_DLL),y)
	
	PROJ_CLIENT_DLL = $(LIBOUTPUT)/lib$(CLIENT_LIB).so
	PROJ_SRV_DLL = $(LIBOUTPUT)/lib$(SRV_LIB).so
	PROJ_COMMON_DLL = $(LIBOUTPUT)/lib$(COMMON_LIB).so

	DLL_OBJS = $(PROJ_SRV_DLL) $(PROJ_CLIENT_DLL) $(PROJ_COMMON_DLL)
	ALL_PROJS = $(ALL_PROJS)

	LOCAL_CFLAG =  $(CFLAGS) -fPIC
else

	PROJ_CLIENT = $(LIBOUTPUT)/lib$(CLIENT_LIB).a
	PROJ_SRV = $(LIBOUTPUT)/lib$(SRV_LIB).a
	PROJ_COMMON = $(LIBOUTPUT)/lib$(COMMON_LIB).a

	ALL_PROJS = $(PROJ_SRV) $(PROJ_CLIENT) $(PROJ_COMMON)

	LOCAL_CFLAG =  $(CFLAGS)
endif


##########make 
##############################################################


all: $(ALL_PROJS)
	
$(PROJ_SRV): $(OBJS_SRV)
	$(AR) $(PROJ_SRV)  $(OBJS_SRV) $(LibFLAGS)

$(PROJ_CLIENT): $(OBJ_CLIENT)
	$(AR) $(PROJ_CLIENT)  $(OBJ_CLIENT) $(LibFLAGS)

$(PROJ_COMMON): $(OBJ_COMMON)
	$(AR) $(PROJ_COMMON)  $(OBJ_COMMON) $(LibFLAGS)

# DLL
$(PROJ_SRV_DLL): $(OBJS_SRV)
	$(CPP_DLL) -fPIC -o $(PROJ_SRV_DLL)  $(OBJS_SRV) $(LibFLAGS) -liconv

$(PROJ_CLIENT_DLL): $(OBJ_CLIENT)
	$(CPP_DLL) -fPIC -o $(PROJ_CLIENT_DLL) $(OBJS_SRV) $(LibFLAGS) -liconv

$(PROJ_COMMON_DLL): $(OBJ_COMMON)
	$(CPP_DLL) -fPIC -o $(PROJ_COMMON_DLL) $(OBJS_SRV) $(LibFLAGS) -liconv

clean:
	rm -f $(ALL_PROJS) $(DLL_OBJS)
	

###############create dependence file #############
.PHONY: clean

#############################################################
